echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
# setwd("E:/Rwork/04_Book/book_git/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
# when the data has already been aggregated once
df_sample <- tribble(
~name,    ~gender,   ~sum,
"Max",    "male",       10,
"Sandra", "female",      1,
"Susan",  "female",      4)
df_sample
df_sample %>% unCount() %>% Freq_table("gender")
df_sample  %>% Freq_table("gender", wt="sum")
## Formula interface for tabulated data:
mosaicplot(~ Sex + Age + Survived + Class, data = Titanic,
color =c("orange","steelblue") )
#행끼리 1:1매칭
apply(y, MARGIN = c(1,2), paste, collapse ="-")
y <- array(1:24, dim = c(4,3,2))
#2nd menthod
# y <- 1:24
# dim(y)<-c(4,3,2)
y
apply(y, MARGIN = 1, FUN = paste)
var.test(mpg ~ vs, data = mtcars)
var.test(mpg ~ vs, data = mtcars)
var.test(mpg ~ vs, data = mtcars)  %>%
broom::tidy()
var.test(mpg ~ vs, data = mtcars) %>%
jjstat::report_stat("var.test", trans= TRUE, show="data")
mtcars %>% lapply( FUN=mean)
result = list()
for (i in seq_along(mtcars)){
result[i] = mean(mtcars[[i]])
}
result
lapply(data= mtcars, FUN = mean)
lapply(X=mtcars, FUN = mean)
lapply(X=mtcars, FUN = mean)
result = list()
for (i in seq_along(mtcars)){
result[i] = mean(mtcars[[i]])
}
names(result) = colnames(mtcars)
result
? names
lapply(X=mtcars, FUN = mean) %>% do.call(what=rbind)
do.call(what=rbind, arg = lapply(X=mtcars, FUN = mean))
# lapply(X=mtcars, FUN = mean) %>% do.call(what=rbind)
do.call(what = cbind, arg = lapply(X=mtcars, FUN = mean))
do.call(what = rbind, arg = lapply(X=mtcars, FUN = mean))%>%round(3)
sapply(X=mtcars, FUN = mean)
sapply(X=mtcars, FUN = mean) %>% t()
sapply(X=mtcars, FUN = mean)
t(sapply(X=mtcars, FUN = mean) )
sapply(X=mtcars, FUN = mean) %>%data.frame()
sapply(X=mtcars, FUN = mean) %>%data.frame() %>%as.matrix()
sapply(X=mtcars, FUN = mean) %>%
data.frame() %>%
as.matrix() %>%  # matrix까지 변형
`colnames<-`(c("평균값"))
sapply(X=mtcars, FUN = range)
des = function(x){
is.nueric(x)  data.frame(Mean = mean(x), SD=sd(x), N=length(x))
des = function(x){
if(is.nueric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
res
}
sapply(X=mtcars, FUN = des)
des = function(x){
if(is.nueric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
res
}
sapply(X=mtcars, FUN = des)
des = function(x){
if(is.numeric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
res
}
sapply(X=mtcars, FUN = des)
# 변수의 factor처리
MTC = MTcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb")
# 변수의 factor처리
MTC = mtcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb")
#기술통계 함수
des = function(x){
if(is.numeric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
res
}
#데이테 함수의 적용
sapply(MTC, des)
#데이테 함수의 적용
sapply(X=MTC,FUN= des)
MTC
# 변수의 factor처리
MTC = mtcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb", fun=as.factor)
MTC
#기술통계 함수
des = function(x){
if(is.numeric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
res
}
#데이테 함수의 적용
sapply(X=MTC,FUN= des)
# 변수의 factor처리
MTC = mtcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb", fun=as.factor)
MTC
#기술통계 함수
des = function(x){
if(is.numeric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
return(res)
}
#데이테 함수의 적용
sapply(X=MTC,FUN= des)
# 변수의 factor처리
MTC = mtcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb", fun=as.factor)
MTC
#기술통계 함수
# des = function(x){
#   if(is.numeric(x)){
#    res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
#   }
#   return(res)
# }
# #데이테 함수의 적용
# sapply(X=MTC, FUN= des)
MTC$am %>% class()
MTC
# 변수의 factor처리
MTC = mtcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb", fun=as.factor)
MTC
#기술통계 함수
des = function(x){
if(is.numeric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
return(res)
}
#데이테 함수의 적용
sapply(X=MTC, FUN= des)
# 변수의 factor처리
MTC = mtcars# %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb", fun=as.factor)
# MTC
#기술통계 함수
des = function(x){
if(is.numeric(x)){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
}
return(res)
}
#데이테 함수의 적용
sapply(X=MTC, FUN= des)
#데이테 함수의 적용
sapply(iris, FUN= des)
# 변수의 factor처리
MTC = mtcars# %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb", fun=as.factor)
# MTC
#기술통계 함수
des = function(x){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
return(res)
}
#데이테 함수의 적용
sapply(MTC, FUN= des)
# 변수의 factor처리
MTC = mtcars %>% jjstat::as_trt("am", "Vs", "cyl","gear", "carb")
# MTC
#기술통계 함수
des = function(x){
ifelse( is.numeric(x)), data.frame(Mean = mean(x), SD=sd(x), N=length(x)),NA)
# MTC
#기술통계 함수
des = function(x){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
return(res)  }
#데이테 함수의 적용
sapply(mtcars, FUN = des)
mtcars %>%map(mean)
lapply(X=mtcars, FUN = mean) %>% str()
map(mtcars, mean) %>% str()
map(mtcars, mean) %>% do.call(what = rbind)
map_dbl(mtcars, mean)
mtcars %>%
map_dbl(function(x) length(unique(x)))
mtcars %>%
map_dbl(function(x){data.frame(Mean = mean(x), SD=sd(x), N=length(x)) } )
#기술통계 함수
des = function(x){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
return(res)  }
#분석
mtcars %>%  map_dbl(des)
#기술통계 함수
des = function(x){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
return(res)  }
#분석
mtcars %>%  map_dbl(~des)
#기술통계 함수
des = function(x){
res = data.frame(Mean = mean(x), SD=sd(x), N=length(x))
return(res)  }
#분석
mtcars %>%  map(des)
#분석
mtcars %>%  map(des) %>% do.call(what= rbind)
#분석
mtcars %>%  map(des) %>% str()#do.call(what= rbind)
#분석
mtcars %>%  map(des) %>% do.call(what= rbind)
#데이테 함수의 적용
sapply(mtcars, FUN = des) %>% data.frame()
#데이테 함수의 적용
sapply(mtcars, FUN = des)
#데이테 함수의 적용
sapply(mtcars, FUN = des) %>% t()
mtcars %>%
map_dbl(function(x) length(unique(x)))
#분석
mtcars %>%  map(des) %>% do.call(what= rbind) %>% print()
#분석
mtcars %>%  map(des) %>% do.call(what= rbind)
mysummary(mtcars)
iris %>%map_dbl(mean)
iris %>% sapply(mean)
iris %>% mysummary()
iris %>% mysummary(all=TRUE)
mysummary(mtcars, "mpg","wt","hp")
mysummary(mtcars, "mpg")
mysummary(mtcars, "mpg","wt","hp", msdn = TRUE)
mysummary(mtcars, "mpg","wt","hp", msdn = TRUE) %>% Round(2)
mtcars %>% summarise_all(mean)
mtcars %>% summarise_all(mean)
mtcars %>% summarise_all(mean) %>% t()
mtcars %>% summarise(mean)
mtcars %>% summarise(accross(mean))
mtcars %>% summarise(across(mean))
mtcars %>% summarise(across(where(is.numeric), mean))
mtcars %>% summarise(list(mean))
mtcars %>% summarise(mean=mean(.))
mtcars %>% summarise(across(., mean)  )
mtcars %>% summarise(across(colnames(mtcars), mean)  )
mtcars %>% summarise(across(colnames(.), mean)  )
mtcars %>%
summarise(across(all_of(.), mean)  )
mtcars %>%
summarise(across(vars(.), mean)  )
mtcars %>%
summarise(across(list(.), mean)  )
#소수점 자리수를 2자리로 변경
mysummary(mtcars, "mpg","wt","hp", msdn = TRUE) %>% Round(2)
mysummary(mtcars, "mpg","wt","hp", msdn = TRUE)
mtcars %>% tapply(INDEX = am, FUN=mean)
mtcars %>% tapply(.$mpg, INDEX = .$am, FUN=mean)
tapply(mtcars$mpg, INDEX = mtcars$am, FUN=mean)
tapply(mtcars, INDEX = mtcars$am, FUN=mean)
tapply(mtcars$mpg, INDEX = mtcars$cyl, FUN=mean)
psych::describeBy(mtcars, group=cyl)
psych::describeBy(mtcars, group=mtcars$cyl)
with(mtcars, tapply(mpg, list(cyl, am), mean))
with(mtcars, tapply(mpg, list(CYL=cyl, TRANS=am), mean))
tapply(mtcars$mpg, INDEX = list(CYL=mtcars$cyl), FUN=mean)
tapply(mtcars$mpg, INDEX = list(Cylinder = mtcars$cyl), FUN=mean)
with(mtcars, tapply(mpg, list(CYL=cyl, TRANS=am, vs), mean))
with(mtcars, tapply(mpg, list(CYL=cyl, TRANS=am), mean))
with(mtcars, aggregae(mpg, list(CYL=cyl, TRANS=am), mean))
with(mtcars, aggregate(mpg, list(CYL=cyl, TRANS=am), mean))
with(mtcars, tapply(mpg, list(CYL=cyl, TRANS=am), mean)) %>% class()
aggregate(X = mtcars$mpg, INDEX = list(Cylinder = mtcars$cyl), FUN=mean)
aggregate(X = mtcars$mpg, list(CYL=mtcars$cyl), FUN=mean)
aggregate(x = mtcars$mpg, list(CYL=mtcars$cyl), FUN=mean)
aggregate(x = mtcars$mpg, list(CYL=mtcars$cyl), FUN=mean, simplity =F)
with(mtcars, aggregate(mpg, list(CYL=cyl, TRANS=am), mean))
with(mtcars, tapply(mpg, list(CYL=cyl, TRANS=am[,1]), mean))
aggregate(mtcars, list(cyl, am), mean)
aggregate(mtcars, list(mtcars$cyl, mtcars$am), mean)
tapply(X = mtcars, INDEX = list(Cylinder = mtcars$cyl), FUN = mean)
tapply(X = mtcars$mpg, INDEX = list(Cylinder = mtcars$cyl), FUN = mean)
with(mtcars, tapply(mpg, list(CYL = cyl, TRANS = am), mean))
aggregate(mtcars, list(mtcars$cyl), mean)
aggregate(mpg ~ cyl, data = mtcars)
aggregate(mpg ~ cyl,  data = mtcars, mean)
aggregate(x = mpg ~ cyl,  data = mtcars, FUN = mean)
aggregate(1 ~ cyl, mtcars, mean)
aggregate(x= 1 ~ cyl, mtcars, mean)
aggregate(formula = mpg ~ cyl,  data = mtcars, FUN = mean)
aggregate(x = 1 ~ cyl, mtcars, mean)
aggregate(x = 1 ~ cyl, ata = mtcars, mean)
aggregate(x = 1 ~ cyl, ata = mtcars, length)
aggregate(x = am ~ cyl, ata = mtcars, length)
aggregate(x = am ~ cyl, data = mtcars, length)
aggregate(x = am ~ cyl, data = mtcars, mean)
aggregate(x = 1 ~ cyl, data = mtcars, mean)
aggregate(mpg~ 1, data = mtcars, mean)
aggregate(x = mpg ~ 1,  data = mtcars, FUN = mean)
aggregate(x = mpg ~ cyl,  data = mtcars, FUN = mean)
aggregate(mpg ~ cyl + am, mtcars, mean)
aggregate( cbind(mpg, hp)  ~ cyl + am, mtcars, mean)
aggregate( cbind(mpg, hp, wt)  ~ cyl + am, mtcars, mean)
aggregate( .  ~ cyl + am, mtcars, mean)
aggregate( .  ~ cyl , mtcars, mean)
aggregate(len ~ ., data = ToothGrowth, mean)
aggregate(len ~ ., data = ToothGrowth, mean) %>% xtabs(formula=len ~.)
aggregate(len ~ ., data = ToothGrowth, mean) %>%
to_table()
aggregate(len ~ ., data = ToothGrowth, mean) %>%
to_table("len")
aggregate(len ~ ., data = ToothGrowth, mean)
aggregate(len ~ ., data = ToothGrowth, mean) %>% to_table("len")
aggregate(len ~ ., data = ToothGrowth, mean) %>% to_table("dose")
aggregate(len ~ ., data = ToothGrowth, mean) %>%
xtabs(formula = len ~.)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
# setwd("E:/Rwork/04_Book/book_git/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
aggregate(len ~ ., data = ToothGrowth, mean)
aggregate(len ~ ., data = ToothGrowth, mean) %>%
xtabs(formula = len ~.)
aggregate(len ~ ., data = ToothGrowth, mean) %>% to_table(value = "len")
aggregate(len ~ ., data = ToothGrowth, mean) %>%
xtabs(formula = len ~.)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
# setwd("E:/Rwork/04_Book/book_git/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
aggregate(len ~ ., data = ToothGrowth, mean) %>%
xtabs(formula = len ~.)
aggregate(len ~ ., data = ToothGrowth, mean) %>% to_table() #이것도 가능
# aggregate(len ~ ., data = ToothGrowth, mean) %>% to_table(value = "len")
with(mtcars, tapply(mpg, list(CYL = cyl, TRANS = am), mean)) %>% data.frame()
with(mtcars, tapply(mpg, list(CYL = cyl, TRANS = am), mean))
mtcars %>% group_by(cyl)
mtcars %>% group_by(cyl) %>% summarise(M= mean(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(M = mean(mpg), SD = sd(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(mean)
mtcars %>%
group_by(cyl) %>%
summarise(across(.,mean))
mtcars %>%
group_by(cyl) %>%
summarise(M = mean(mpg), SD = sd(mpg), N = n())
mtcars %>% group_by(cyl) %>%
summarise(disp = mean(disp),hp = mean(hp)
)
mtcars %>% group_by(cyl) %>%
summarise(disp_Mean = mean(disp), hp_mean = mean(hp)
)
mtcars %>% group_by(cyl) %>%
summarise_all(mean)
mtcars %>% group_by(cyl) %>%
summarise(disp_Mean = mean(disp), mpg_N = n(), hp_mean = mean(hp)
)
mtcars %>% group_by(cyl) %>%
summarise(SampleSzie_N = n(), disp_Mean = mean(disp),  hp_mean = mean(hp)
)
mtcars %>% group_by(cyl) %>%
summarise(SN = n(), disp_Mean = mean(disp),  hp_mean = mean(hp)
)
mtcars %>% group_by(cyl) %>%
summarise(SN = n(), mpg_Mean = mean(mpg), disp_Mean = mean(disp),  hp_mean = mean(hp)
)
mysummaryBy(mpg ~ 1, data = mtcars)
mtcars %>% mysummaryBy(mpg)
mtcars %>% mysummaryBy(mpg ~1 )
mtcars %>% mysummaryBy(mpg ~1 , fun = mean )
mtcars %>% mysummaryBy(mpg ~  am , fun = mean )
mysummaryBy(mpg ~ 1, data = mtcars, "mpg")
mtcars %>% mysummaryBy(mpg ~  1 , fun = mean )
mysummaryBy(mpg ~ vs, data = mtcars)
mysummaryBy(mpg ~ vs + am, data = mtcars)
data(mtcars)
mtcars$am = factor(mtcars$am, levels=c(0,1), labels= c("automatic","manual" ))
mtcars$vs  = factor(mtcars$vs, levels=c(0,1), labels= c("V-shaped","straight" ))
mtcars$cyl  = factor(mtcars$cyl, levels=c(0,1), labels= c("cyl-4","cyl-6","cyl-8"))
data(mtcars)
mtcars$am = factor(mtcars$am, levels=c(0,1), labels= c("automatic","manual" ))
mtcars$vs  = factor(mtcars$vs, levels=c(0,1), labels= c("V-shaped","straight" ))
mtcars$cyl  = factor(mtcars$cyl, levels=c(4,6,8), labels= c("cyl-4","cyl-6","cyl-8"))
aggregate(mtcars, list(mtcars$cyl), mean)
with(mtcars, aggregate(mpg, list(CYL = cyl, TRANS = am, ), mean))
data(mtcars)
mtcars$am = factor(mtcars$am, levels=c(0,1), labels= c("automatic","manual" ))
mtcars$vs  = factor(mtcars$vs, levels=c(0,1), labels= c("V-shaped","straight" ))
mtcars$cyl  = factor(mtcars$cyl, levels=c(4,6,8), labels= c("cyl-4","cyl-6","cyl-8"))
aggregate(mtcars, list(mtcars$cyl), mean)
with(mtcars, aggregate(mpg, list(CYL = cyl, TRANS = am, ), mean))
with(mtcars, aggregate(mpg, list(CYL = cyl, TRANS = am), mean))
aggregate(x = mpg ~ cyl,  data = mtcars, FUN = mean)
aggregate(mpg ~ 1, data = mtcars, mean)
aggregate(mpg ~ cyl + am, mtcars, mean)
aggregate( cbind(mpg, hp, wt)  ~ cyl + am, mtcars, mean)
aggregate( .  ~ cyl , mtcars, mean)
aggregate(len ~ ., data = ToothGrowth, mean)
mtcars %>%
group_by(cyl) %>%
summarise(M = mean(mpg), SD = sd(mpg), N = n())
mtcars %>% group_by(cyl) %>%
summarise(SN = n(), mpg_Mean = mean(mpg), disp_Mean = mean(disp),  hp_mean = mean(hp)
)
mtcars %>% group_by(cyl) %>% summarise_all(mean)
# mysummaryBy(mpg ~ 1, data = mtcars)
mtcars %>% mysummaryBy(mpg ~ 1 )
mtcars %>% mysummaryBy(mpg ~  1 , fun = mean )
mysummaryBy(mpg ~ vs, data = mtcars)
mysummaryBy(mpg ~ vs + am + cyl, data = mtcars)
mysummaryBy(mpg ~ vs+am, data = mtcars, agg=TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, agg=TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, agg = TRUE)
mysummaryBy(mpg ~ vs*cyl, data = mtcars)
mysummaryBy(mpg ~ vs+cyl, data = mtcars)
mysummaryBy(mpg ~ vs + am, data = mtcars, stat="ttest")
mysummaryBy(mpg ~ vs + am, data = mtcars, stat="t.test")
mysummaryBy(mpg ~ vs , data = mtcars, stat="t.test")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
# setwd("E:/Rwork/04_Book/book_git/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
mysummaryBy(mpg ~ vs+am, data = mtcars, agg=TRUE)
mysummaryBy(mpg ~ vs + am + cyl, data = mtcars)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, agg = TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, agg = TRUE, msdn = TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE, t=TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE, t=TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, t=TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE, t=TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE)
mysummaryBy(cbind(mpg, hp) ~ vs+am, data = mtcars, msdn = TRUE, agg = TRUE, t=TRUE)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
# setwd("E:/Rwork/04_Book/book_git/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE, t=TRUE)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE, t=TRUE)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE, t=T)
library(jjstat)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
# setwd("E:/Rwork/04_Book/book_git/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE, t=T)
mysummaryBy(mpg ~ vs + am, data = mtcars, agg = TRUE, t=T)
