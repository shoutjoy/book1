chisq_test(correct=T)
chisq_test <- function(Obs, correct=FALSE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("Pearson's Chi-squared test with Yates' continuity correction")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic #%>% jjstat::p_mark_sig("p_value")
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
chisq_test(independence_data)
table(mtcars$am, mtcars$vs) %>%
chisq_test(correct=T)
chisq_test <- function(Obs, correct=FALSE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic #%>% jjstat::p_mark_sig("p_value")
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
table(mtcars$am, mtcars$vs) %>%
chisq_test(correct=T)
chisq_test <- function(Obs, correct=FALSE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic %>% jjstat::p_mark_sig("p_value")
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
table(mtcars$am, mtcars$vs) %>%
chisq_test(correct=T)
chisq_test <- function(Obs, correct=FALSE, digits = 3) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic %>% jjstat::p_mark_sig("p_value") %>%
Round(digits = digits)
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
table(mtcars$am, mtcars$vs) %>%
chisq_test(correct=T)
MASS::caith %>% chisq_test()
MASS::caith %>% chisq_test(correct = TRUE)
chisq_test <- function(Obs, correct=FALSE, digits = 3) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
p_value= formatC(p_value, format = "e", digits = 4)
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic %>% jjstat::p_mark_sig("p_value") %>%
Round(digits = digits)
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
chisq_test(independence_data)
chisq_test <- function(Obs, correct=FALSE, digits = 3) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
p_value= formatC(p_value, format = "e", digits = 2)
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic %>% jjstat::p_mark_sig("p_value") %>%
Round(digits = digits)
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
chisq_test(independence_data)
chisq_test <- function(Obs, correct=FALSE, digits = 3) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
# Yates' continuity correction
cat("Pearson's Chi-squared test with Yates' continuity correction \n\n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
cat("Pearson's Chi-squared test  \n\n")
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
# p_value= formatC(p_value, format = "e", digits = 2)
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic %>% jjstat::p_mark_sig("p_value") %>%
Round(digits = digits)
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
chisq_test(independence_data)
chisq_test <- function(Obs, correct=FALSE, digits = 3) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
# Yates' continuity correction
cat("Pearson's Chi-squared test with Yates' continuity correction \n\n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
cat("Pearson's Chi-squared test  \n\n")
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
# p_value= formatC(p_value, format = "e", digits = 2)
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic %>% jjstat::p_mark_sig("p_value") %>%
Round(digits = digits)
}
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
MASS::caith %>% chisq_test()
# Define a function: Convert numbers to scientific notation or common number representations
format_number <- function(number) {
# Use scientific notation when there are more than 18 decimal places
if (nchar(sub("\\d+\\.", "", as.character(number))) >= 8) {
return(format(number, scientific = TRUE, digits = 3))
} else {
return(format(number, scientific = FALSE, digits = 5))
}
}
chisqTest <- function(Obs, correct=FALSE, digits = 3, cat=TRUE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("\n  Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
cat(" \n  Pearson's Chi-squared test\n")
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic<- statistic %>% jjstat::p_mark_sig("p_value") #%>%
statistic$p_value <- format_number(statistic$p_value) %>%as.numeric()
#  jjstat::Round(digits = digits)
#  statistic
if(cat){
cat("\n", paste0( "X-squared = ",round(chisquare, digits),
", df = ",df, ", p.value = ",
statistic$p_value," ", statistic$sig), "\n\n")
}else{
res2 = statistic
res2
}
}
chisq_test(independence_data)
chisq_test(independence_data, cat=T)
MASS::caith %>% chisqTest()
# independence_data %>% margin.table(margin = 1)
independence_data %>% margin.table(margin = 2)/margin.table(independence_data)
# Define a function: Convert numbers to scientific notation or common number representations
format_number <- function(number) {
# Use scientific notation when there are more than 18 decimal places
if (nchar(sub("\\d+\\.", "", as.character(number))) >= 8) {
return(format(number, scientific = TRUE, digits = 3))
} else {
return(format(number, scientific = FALSE, digits = 5))
}
}
chisqTest <- function(Obs, correct=FALSE, digits = 3, cat=TRUE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("\n  Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
cat(" \n  Pearson's Chi-squared test\n")
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic<- statistic %>% jjstat::p_mark_sig("p_value") #%>%
statistic$p_value <- format_number(statistic$p_value) %>%as.numeric()
#  jjstat::Round(digits = digits)
#  statistic
if(cat){
cat("\n", paste0( "X-squared = ",round(chisquare, digits),
", df = ",df, ", p.value = ",
statistic$p_value," ", statistic$sig), "\n\n")
}else{
res2 = statistic
res2
}
}
chisqTest(independence_data, cat=T)
MASS::caith %>% chisqTest()
MASS::caith %>% chisqTest(correct = TRUE)
# Define a function: Convert numbers to scientific notation or common number representations
format_number <- function(number, n=6) {
# Use scientific notation when there are more than 18 decimal places
if (nchar(sub("\\d+\\.", "", as.character(number))) >= n) {
return(format(number, scientific = TRUE, digits = 3))
} else {
return(format(number, scientific = FALSE, digits = 5))
}
}
chisqTest <- function(Obs, correct=FALSE, digits = 3, cat=TRUE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("\n  Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
cat(" \n  Pearson's Chi-squared test\n")
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic<- statistic %>% jjstat::p_mark_sig("p_value") #%>%
statistic$p_value <- format_number(statistic$p_value) %>%as.numeric()
#  jjstat::Round(digits = digits)
#  statistic
if(cat){
cat("\n", paste0( "X-squared = ",round(chisquare, digits),
", df = ",df, ", p.value = ",
statistic$p_value," ", statistic$sig), "\n\n")
}else{
res2 = statistic
res2
}
}
MASS::caith %>% chisqTest()
# Define a function: Convert numbers to scientific notation or common number representations
format_number <- function(number, n=6) {
# Use scientific notation when there are more than 18 decimal places
if (nchar(sub("\\d+\\.", "", as.character(number))) >= n) {
return(format(number, scientific = TRUE, digits = 3))
} else {
return(format(number, scientific = FALSE, digits = 5))
}
}
chisqTest <- function(Obs, correct=FALSE, digits = 3, cat=TRUE) {
Expected <- outer( rowSums(Obs), colSums(Obs)) /sum(Obs) #outer: 성분끼리의 곱
if(correct){
cat("\n  Pearson's Chi-squared test with Yates' continuity correction \n")
chisquare <- sum(  (abs(Obs- Expected) - 0.5  )^2/ Expected  )
}else{
cat(" \n  Pearson's Chi-squared test\n")
chisquare <- sum((Obs- Expected)^2/Expected)  #chi square 계산
}
df = (ncol(Obs)-1)*(nrow(Obs)-1) #자유도
p_value = 1- pchisq(chisquare, df) #p값
statistic <- cbind(Chisq = chisquare, df, p_value)
rownames(statistic) = c("statistic")
statistic<- statistic %>% jjstat::p_mark_sig("p_value") #%>%
statistic$p_value <- format_number(statistic$p_value) %>%as.numeric()
#  jjstat::Round(digits = digits)
#  statistic
if(cat){
cat("\n", paste0( "X-squared = ",round(chisquare, digits),
", df = ",df, ", p.value = ",
statistic$p_value," ", statistic$sig), "\n\n")
}else{
res2 = statistic
res2
}
}
chisqTest(independence_data)
MASS::caith %>% chisqTest(correct = TRUE)
table(mtcars$am, mtcars$vs) %>%
chisq.test()
table(mtcars$am, mtcars$vs) %>%
chisqTest(correct=T)
table(mtcars$am, mtcars$vs) %>%
chisqTest()
table(mtcars$am, mtcars$vs) %>%
chisq.test()$expected
table(mtcars$am, mtcars$vs) %>%
chisq.test()
table(mtcars$am, mtcars$vs) %>%  chisqTest(correct=TRUE)
table(mtcars$am, mtcars$vs) %>%
chisq.test(correct=FALSE)
library(mokken)
MTC <- mtcars  #분석데이터
MTC$am <- as.numeric(MTC$am )  # numeric변수로 변환
MTC$vs <- as.numeric(MTC$vs )  # numeric변수로 변환
# mokken::coefH(MTC[,c("am","vs")], results = FALSE)$H
mokken::coefH(MTC[,c("am","vs")])
lm(mpg ~ hp+ wt+ disp + qesc, mtacars) %>% summary()
lm(mpg ~ hp+ wt+ disp, mtacars) %>% summary()
lm(mpg ~ hp+ wt+ disp, mtacars)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
sats<- jjstat::sats
str(sats)
stats %>% summarise_all(mean)
sats %>% summarise_all(mean)
#correlation analysis
cor.sats <-sats[,1:27] %>% corr.test()
#상관분석과 평균 및 표준편차
rbind(cor.sats$r,
psych::describe( sats[,1:27]) %>% data.frame() %>%
select(3:4,2) %>%
t()) %>%round(2)
#correlation analysis
cor.sats <-sats[,1:27] %>% psych::corr.test()
#correlation analysis
cor.sats <-sats[,1:27] %>% psych::corr.test()
#상관분석과 평균 및 표준편차
rbind(cor.sats$r,
psych::describe( sats[,1:27]) %>% data.frame() %>%
select(3:4,2) %>%
t()) %>%round(2)
t.test
t.test()
t.test
lm
sats %>% summarise_all(mean)
sats%>% discard(is.factor) %>% map_dbl(mean)
# method 1
sats%>%
discard(!is.factor) %>%
map_dbl(mean)
# method 1
sats%>%
keep(!is.factor) %>%
map_dbl(mean)
# method 1
sats%>%
keep(is.numeric) %>%
map_dbl(mean)
sats%>%
keep(is.numeric) %>%
mysummary()
# method 1
sats%>%
keep(is.numeric) %>%
map_dbl(mean)
sats%>%
keep(is.numeric) %>%
mysummary(colnames(.))
sats%>%
keep(is.numeric) %>%
mysummary(colnames(.)) %>%
Round(2)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
#전체의 평균을 구해보는 함수
sats %>% summarise_all(mean)
# method 1
sats%>%
keep(is.numeric) %>%
map_dbl(mean)
sats%>%
keep(is.numeric) %>%
mysummary(all=TRUE)
sats%>% mysummary(all=TRUE)
#
sats%>% mysummary(all=TRUE, digits = 2)
#
sats%>% mysummary(all=TRUE) %>% Round(2)
#
sats%>% mysummary(all=TRUE)
#
sats%>% mysummary(all=TRUE, digits 2)
#
sats%>% mysummary(all=TRUE, digits =2)
sats%>% mysummary(all=TRUE, digits =2)
#
sats%>% mysummary(all=TRUE, digits =2) %>% kable("markdown")
#
sats%>% mysummary(all=TRUE, digits =1)
sats%>% mysummary(all=TRUE, digits =1)
sats%>% mysummary(all=TRUE, digits = 6)
sats%>% mysummary(all=TRUE, digits = 6)%>%class()
#
sats%>% mysummary(all=TRUE, digits = 3)
#
sats%>% mysummary(all=TRUE, digits = 3)
knitr::opts_chunk$set(
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
# method 1
sats%>%
discard(is.factor) %>%
map_dbl(mean)
sats%>%
keep(is.numeric) %>%
mysummary(colnames(.)) %>%
Round(2)
#
sats%>% mysummary(all=TRUE, digits = 3)
sats%>% mysummary(all=TRUE, digits = 3)
sats%>% mysummary(all=TRUE, digits = 2)
sats%>% mysummary(all=TRUE, digits = 2) %>% class()
sats%>% mysummary(all=TRUE, digits = 2) %>% data.frame()
sats%>% mysummary(all=TRUE, digits = 2) %>% data.frame() %>% Round(2)
#
sats%>% mysummary(all=TRUE)
#
sats%>% mysummary(all=TRUE) %>% data.frame()
#
sats%>% mysummary(all=TRUE) %>% data.frame() %>% Round(2)
#
sats%>% mysummary(all=TRUE)
sats%>% mysummary(all=TRUE)
sats%>% mysummary(all=TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
#word_document
)
setwd("F:/Rwork/04_Book/book1")
library(rstatix)
# devtools::install_github("shoutjoy/jjstat")
library(jjstat)  # statistical summary
library(knitr)
#
sats%>% mysummary(all=TRUE)
lm(mpg ~ hp+ wt+ disp, mtacars)
lm(mpg ~ hp+ wt+ disp, mtcars)
lm(mpg ~ hp+ wt+ disp, mtcars) %>% summary()
lm(mpg ~ hp+ wt+ disp, mtcars) %>% tidy()
lm(mpg ~ hp+ wt+ disp, mtcars) %>% tidy() %>%
ztest_df(2,3)
lm(mpg ~ hp+ wt+ disp, mtcars) %>% tidy() %>%
ztest_df(row1= 2,row2 =3)
lm(mpg ~ hp+ wt+ disp, mtcars) %>%
ztest_df(row1= 2,row2 =3)
wald_test_gender(1.311, 1.628, 1.311-0.366,  -2.732)
wald_test(1.311, 1.628, 1.311-0.366,  -2.732)
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res")
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res1")
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res2")
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res", digits=2)
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res")
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res", digits = 5)
wald_test(1.311, 1.628, 1.311-0.366,  -2.732, type="res", digits = 5) %>% class()
